/* Quick sort*/

 {9  7, 5, 11, 12, 2, 14, 3, 10, 6};
  0  1	2  3   4   5   6  7   8  9
 left 							right


quickSort(array, left, right)
	if left<right: 
		pivot = partition(array, left, right)
		quickSort(array, left, pivot)
		quickSort(array, pivot+1, right)

-------------
partition(array, 0, 9)
left =  0, array[left]=17
right = 9, array[right]=6

{17, 7, 5, 11, 12, 2, 14, 3, 10, 6};
 0   1	2  3   4   5   6  7   8  9
left 							right
----------------

1.	{Original Array}
2.	{Original Array - 1 }{pivot/last element}
3.	{less than pivot } pivot {greater than pivot}

5 _ _ _ _ pivot _ _ _ _ 

0

5 2 3
{17, 7, 5, 11, 12, 2, 14, 3, 10, 6};
 0   1	2  3   4   5   6  7   8  9
left 							right

17: 17<6
7:  7<6
5: 	5<6
	i=0
	i=1
	i=2
	


partition(array, 0, 9)
int partition(array, left, right):
	pivot = array[right] 
	i = left - 1
	for(int j=0; j<=right-1; j++):
		if(arr[j] <= pivot)
			i++ //tells the position to swap the element w
			
			/*swap*/
			int temp = array[i]
			array[i] = array[j]
			array[j] = temp
			/*end of swap*/

		swap(array[i+1], array[right])
		return  i+1 //pivot position





	17  7  5  11  12  2  14  3  10  *6*
	0  1  2  3   4   5   6  7   8   9 
	
	partition(array, 0, 9)
	pivot = 6
	left = 0
	right = 9
	i = -1
	for(j=left, j<=high-1; j++)
	for(j=0; j<=8; j++)
		
		i=-1, j=0: 17 < 6
		i=-1, j=1:  7 < 6
		i=-1, j=2:  5 < 6
					i++,0
					swap(array[0], array[j])
					swap(17, 5)
				
	5  2  3  11  12  7  14  17  10  *6*
	0  1  2   3   4   5   6  7   8   9 
	
		i=0, j=3: 11 < 6
			 J=4: 12<6
			 j=5: 2<6
				i++, i=1
				swap(array[i], array[5])
				swap(7,2)
			j=6: 14<6
			j=7: 3<6
				i++, i=2
					swap(17,3)
			j=8: 10<6
			(j=8, i=2)
		swap(array[i+1], array[right])
		swap(11,6)
		return i+1,3

	
	5  2  3     6 		 	12  7  14  17  10  *11
							7   10   11  144   kUICK
	_______     		__________________________ 
	0  1   2  3 		4						9
	lessthan  pivot	greater than pivot
	pivot		
	
QuickSort(array, left, right):
if left < right
 part = partition(array, left, right)
 QuickSort(array, left, part) QuickSort(array, 0, 0)
 QuickSort(array, part+1, right)	QuickSort(array, 2, 2)


		part = 3
		QuickSort(array, 0, 3)
		QuickSort(array, 4, 9)



		5 2 3 6
		pivot = 6
		return 3
			

		523
		partition = 3
		2  3  5  
		
2








